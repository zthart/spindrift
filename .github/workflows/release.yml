name: Dev Release
on:
  push:
    branches: [main]
jobs:
  check-files:
    runs-on: ubuntu-latest
    outputs:
      matched-files: ${{ steps.check-files.outputs.matched-files }}
    steps:
      - name: Checkout spindrift
        uses: actions/checkout@v3

      - name: Unshallow repository
        run: git fetch --prune --unshallow

      - name: Check files
        id: check-files
        run: |
          echo "## Checking commit changes" >> $GITHUB_STEP_SUMMARY
          echo "::group::Show changed files"
          echo "$(git log HEAD^1..HEAD --raw --no-decorate --name-only --pretty=oneline | tail -n +2)"
          echo "::endgroup::"
          MATCHED_FILES=$(git log HEAD^1..HEAD --raw --no-decorate --name-only --pretty=oneline | tail -n +2 | sed -n '/^src/p' | wc -l)
          echo "matched-files=${MATCHED_FILES}" >> $GITHUB_OUTPUT
          if [ ${MATCHED_FILES} -eq 0 ] ; then
            echo "No changes to \`src\` dir detected, not cutting release" >> $GITHUB_STEP_SUMMARY
          else
            echo "Detected ${MATCHED_FILES} changed \`src\` files, generating tag" >> $GITHUB_STEP_SUMMARY
          fi

  make-tag:
    needs: check-files
    runs-on: ubuntu-latest
    if: ${{ needs.check-files.outputs.matched-files != '0' }}
    outputs:
      tag: ${{ steps.generate-tag.outputs.tag-name }}
    steps:
      - name: Checkout spindrift
        uses: actions/checkout@v3

      - name: Unshallow repository
        run: git fetch --prune --unshallow

      - name: Generate tag name
        id: generate-tag
        shell: bash
        run: |
          echo "## Creating Tag" >> $GITHUB_STEP_SUMMARY
          CANDIDATE_TAG="$(grep '^version' Cargo.toml | awk '{print $3}' | sed -r 's/\"//g')-dev+$(date +%y%m%d)"
          echo "**\`\$CANDIDATE_TAG\`**: $CANDIDATE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "Disabling pipefail"
          set +o pipefail
          echo "::group::Existing tags"
          echo "$(git show-ref --tags -d)"
          echo "::endgroup::"
          NEEDED_PART="$(git show-ref --tags -d | grep $CANDIDATE_TAG | wc -l)"
          set -o pipefail
          echo "Re-enabled pipefail"
          echo "**\`\$NEEDED_PART\`**: $NEEDED_PART" >> $GITHUB_STEP_SUMMARY
          if [ $NEEDED_PART -eq 0 ] ; then
            echo "tag-name=$CANDIDATE_TAG" >> $GITHUB_OUTPUT
            echo "Using tag name \`$CANDIDATE_TAG\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "tag-name::$CANDIDATE_TAG.$NEEDED_PART" >> $GITHUB_OUTPUT
            echo "Using tag name \`$CANDIDATE_TAG.$NEEDED_PART\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create tag and push
        run: |
          git tag ${{ steps.generate-tag.outputs.tag-name }}
          git push origin tag ${{ steps.generate-tag.outputs.tag-name }}
  cut-release:
    runs-on: ubuntu-latest
    needs: make-tag
    steps:
      - name: Checkout spindrift
        uses: actions/checkout@v3

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build spindrift
        run: |
          echo "## Building Binary" >> $GITHUB_STEP_SUMMARY
          echo "Build started at \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          cargo build --release
          echo "Build finished at \`$(date)\`" >> $GITHUB_STEP_SUMMARY

      - name: Cut release and upload artifacts
        id: cut-release
        uses: softprops/action-gh-release@v1
        with:
          files: "target/release/spindrift"
          prerelease: true
          tag_name: ${{ needs.make-tag.outputs.tag }}
          fail_on_unmatched_files: true

      - name: Post release summary
        run: |
          echo "Created a release: ${{ steps.cut-release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
